class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
    def insert_begin(self, data):
      new_node = Node(data)
      if self.head is None:
        self.head = new_node
      new_node.next = self.head
      self.head = new_node
    def insert_bw(self, data, pos):
      new_node = Node(data)
      temp = self.head
      flag = 0
      for i in range(pos):
        if temp is None:
          print('error')
          return
        ptr = temp
        temp = temp.next
      new_node.next = temp
      ptr.next = new_node
    def insert_end(self,data):
      new_node = Node(data)
      if self.head is None:
        self.head = new_node
      else:
        temp = self.head
        while temp.next:
          temp = temp.next
        temp.next = new_node
    def delete_begin(self):
      if self.head is None:
        print('list is empty')
      else:
        ptr = self.head
        self.head = ptr.next
        del(ptr)
    def delete_end(self):
      if self.head is None:
        print('list is empty')
      else:
        temp = self.head
        while temp.next:
          ptr = temp
          temp = temp.next
        ptr.next = None
        del(temp)  
    def delete_bw(self,pos):
      if self.head is None:
        print('list is empty')
      else:
        temp = self.head
        for i in range(pos):
          if temp is None:
            print('error-x002')
            return
          ptr = temp
          temp = temp.next
        ptr.next = temp.next
        del(temp)
    def search(self, search_element):
      temp = self.head
      flag = -1
      while temp:
        flag += 1
        if temp.data == search_element:
          print('found',search_element,'at index', flag)
          return
        temp = temp.next
      else:
        print('not found')
    def count(self):
      count = 0
      if self.head is None:
        pass
      else:
        temp = self.head
        while temp:
          count += 1
          temp = temp.next
        print(count)          
    def display(self):
      temp = self.head
      while temp:
        print(temp.data,end=' ')
        temp = temp.next
      print()
def List_to_LinkedList(input_list, l1):
  for i in input_list:
    l1.insert_end(i)
l1 = LinkedList()
List_to_LinkedList([1,2,3,5],l1)
print("Enter 0 to insert at beginning\n"
      "Enter 1 for middle insertion\n"
      "Enter 2 to insert at end\n"
      "Enter 3 to delete at beginning\n"
      "Enter 4 to delete in b/w\n"
      "Enter 5 to delete at end\n"
      "Enter 6 to search element\n"
      "Enter 7 to count elements\n"
      "Enter 8 to display the SLL\n")
a=int(input())
if a==0:
  l1.insert_begin(int(input("Enter element to insert")))
  l1.display()
elif a==1:
  l1.insert_bw(int(input("Enter element to insert")),int(input("Enter position")))
  l1.display()
elif a==2:
  l1.insert_end(int(input("Enter element to insert")))
  l1.display()
elif a==3:
  l1.delete_begin()
  l1.display()
elif a==4:
  l1.delete_bw(int(input("Delete @ which index? ")))
  l1.display()
elif a==5:
  l1.delete_end()
  l1.display()
elif a==6:
  l1.search(int(input("Enter element to search")))
elif a==7:
  l1.count()
elif a==8:
  l1.display()